use crate::error;
use colored::Colorize;
use std::{
    fmt::Display,
    io::Read,
    net::{TcpListener, TcpStream, ToSocketAddrs},
    sync::{
        Arc,
        mpsc::{Receiver, Sender},
    },
};

pub type Result<T> = std::result::Result<T, ()>;

pub struct Server {
    listener: TcpListener,
}

enum Message {
    ClientConnected,
    ClientDisconnected,
    NewMessage,
}

impl Server {
    /// Tries to create a new instance of the server.
    ///
    /// # Arguments
    /// - `addr`: A type that can be converted into a socket address, such as a string like
    /// `"127.0.0.1:8080"` or a tuple like `("0.0.0.0", 8000)`
    ///
    /// # Returns
    /// - `Ok(Server)`: If the listener successfuly binds to the address.
    /// - `Err(())`: If the bind is unsuccessful, with a message logged.
    pub fn build<A: ToSocketAddrs + Display>(addr: A) -> Result<Self> {
        TcpListener::bind(&addr)
            .map(|listener| Self { listener })
            .map_err(|err| error!("Could not bind server to {addr}: {err}"))
    }

    pub fn run(&mut self) {
        let (sender, receiver) = std::sync::mpsc::channel();

        std::thread::spawn(|| Self::server(receiver));

        for stream in self.listener.incoming() {
            match stream {
                Ok(stream) => {
                    let sender = sender.clone();
                    let stream = Arc::new(stream);
                    std::thread::spawn(|| Self::client(sender, stream));
                }
                Err(err) => error!("Failed to connect to client: {err}"),
            }
        }
    }

    fn server(messages: Receiver<Message>) {
        todo!()
    }

    fn client(messages: Sender<Message>, stream: Arc<TcpStream>) -> Result<()> {
        let mut buffer = [0u8; 1024];

        let client_addr = stream
            .peer_addr()
            .map_err(|err| error!("Failed to get client addres: {err}"))?;

        messages.send(Message::ClientConnected);

        loop {
            let n = stream.as_ref().read(&mut buffer).map_err(|err| {
                messages.send(Message::ClientDisconnected);
                error!("Failed to read from client {client_addr}: {err}")
            });
        }
    }
}
